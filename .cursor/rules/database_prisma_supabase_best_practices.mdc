---
description: 
globs: 
alwaysApply: false
---
# 5. Database Best Practices (Prisma and Supabase Integration)
Description: Database best practices focusing on Prisma and Supabase integration.

## 5.1 Prisma Setup
- Use proper schema design.
- Implement proper migrations.
- Use proper relation definitions.
- Configure proper connection.
- Implement proper seeding.
- Use proper client setup.

## 5.2 Prisma Models
- Use proper model naming.
- Implement proper relations.
- Use proper field types.
- Define proper indexes.
- Implement proper constraints.
- Use proper enums.

## 5.3 Prisma Queries
- Use proper query optimization.
- Implement proper filtering.
- Use proper relations loading.
- Handle transactions properly.
- Implement proper pagination.
- Use proper aggregations.

## 5.4 Supabase Setup
- Configure proper project setup.
- Implement proper authentication.
- Use proper database setup.
- Configure proper storage.
- Implement proper policies.
- Use proper client setup.

## 5.5 Supabase Security
- Implement proper RLS policies.
- Use proper authentication.
- Configure proper permissions.
- Handle sensitive data properly.
- Implement proper backups.
- Use proper encryption.

## 5.6 Supabase Queries
- Use proper query optimization.
- Implement proper filtering.
- Use proper joins.
- Handle real-time properly.
- Implement proper pagination.
- Use proper functions.

## 5.7 Database Design
- Use proper normalization.
- Implement proper indexing.
- Use proper constraints.
- Define proper relations.
- Implement proper cascades.
- Use proper data types.

## 5.8 Performance
- Use proper connection pooling.
- Implement proper caching.
- Use proper query optimization.
- Handle N+1 queries properly.
- Implement proper batching.
- Monitor performance metrics.

## 5.9 Security
- Use proper authentication.
- Implement proper authorization.
- Handle sensitive data properly.
- Use proper encryption.
- Implement proper backups.
- Monitor security issues.

## 5.10 Best Practices
- Follow database conventions.
- Use proper migrations.
- Implement proper versioning.
- Handle errors properly.
- Document schema properly.
- Monitor database health.

