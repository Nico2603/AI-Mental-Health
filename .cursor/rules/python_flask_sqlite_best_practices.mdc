---
description: 
globs: 
alwaysApply: false
---
# 7. Python Best Practices
Description: Best practices and patterns for modern Python software development with Flask and SQLite.

## 7.1 Project Structure
- Use src-layout with `src/your_package_name/`.
- Place tests in the `tests/` directory parallel to `src/`.
- Keep configuration in `config/` or as environment variables.
- Store requirements in `requirements.txt` or `pyproject.toml`.
- Place static files in the `static/` directory.
- Use `templates/` for Jinja2 templates.

## 7.2 Code Style
- Follow Black code formatting.
- Use isort for import sorting.
- Follow PEP 8 naming conventions:
  - Use `snake_case` for functions and variables.
  - Use `PascalCase` for classes.
  - Use `UPPER_CASE` for constants.
- Maximum line length of 88 characters (Black default).
- Use absolute imports over relative imports.

## 7.3 Type Hints
- Use type hints for all function parameters and returns.
- Import types from the `typing` module.
- Use `Optional[Type]` instead of `Type | None`.
- Use `TypeVar` for generic types.
- Define custom types in `types.py`.
- Use `Protocol` for duck typing.

## 7.4 Flask Structure
- Use Flask factory pattern.
- Organize routes using Blueprints.
- Use Flask-SQLAlchemy for database.
- Implement proper error handlers.
- Use Flask-Login for authentication.
- Structure views with proper separation of concerns.

## 7.5 Database
- Use SQLAlchemy ORM.
- Use proper connection pooling.
- Define models in separate modules.
- Implement proper relationships.
- Use proper indexing strategies.

## 7.6 Authentication
- Use Flask-Login for session management.
- Implement Google OAuth using Flask-OAuth.
- Hash passwords with bcrypt.
- Use proper session security.
- Implement CSRF protection.
- Use proper role-based access control.

## 7.7 API Design
- Use Flask-RESTful for REST APIs.
- Implement proper request validation.
- Use proper HTTP status codes.
- Handle errors consistently.
- Use proper response formats.
- Implement proper rate limiting.

## 7.8 Testing
- Use pytest for testing.
- Write tests for all routes.
- Use pytest-cov for coverage.
- Implement proper fixtures.
- Use proper mocking with pytest-mock.
- Test all error scenarios.

## 7.9 Security
- Use HTTPS in production.
- Implement proper CORS.
- Sanitize all user inputs.
- Use proper session configuration.
- Implement proper logging.
- Follow OWASP guidelines.

## 7.10 Performance
- Use proper caching with Flask-Caching.
- Implement database query optimization.
- Use proper connection pooling.
- Implement proper pagination.
- Use background tasks for heavy operations.
- Monitor application performance.

## 7.11 Error Handling
- Create custom exception classes.
- Use proper try-except blocks.
- Implement proper logging.
- Return proper error responses.
- Handle edge cases properly.
- Use proper error messages.

## 7.12 Documentation
- Use Google-style docstrings.
- Document all public APIs.
- Keep `README.md` updated.
- Use proper inline comments.
- Generate API documentation.
- Document environment setup.

## 7.13 Development Workflow
- Use virtual environments (e.g., venv).
- Implement pre-commit hooks.
- Use proper Git workflow.
- Follow semantic versioning.
- Use proper CI/CD practices.
- Implement proper logging.

## 7.14 Dependencies
- Pin dependency versions.
- Use `requirements.txt` for production.
- Separate dev dependencies.
- Use proper package versions.
- Regularly update dependencies.
- Check for security vulnerabilities.

